'avg path lenght' = round(avg_path_lenght,2),
'log(n)/log(2m/n)' = round(log(n)/log(2*m/n),2) ) )
global_trans <- transitivity(graph = G, type = "global")
local_trans <- transitivity(graph = G, type = "local")
rho = m/(n*(n-1)/2)
#distribution_geodetics <- distance_table(G)$res #2 minutes
distribution_geodetics <- distribution_geodetics/sum(distribution_geodetics)
#avg_path_lenght<- mean_distance(G, directed = FALSE)
avg_path_lenght <- sum(
distribution_geodetics*
1:length(distribution_geodetics))
ggplot(data =
data.frame(y = distribution_geodetics,       x=1:length(distribution_geodetics)),
aes(y)
) +
geom_bar()
#log(n)/log(2*m/n)
kable(data.frame('Global CC' = round(global_trans,4), 'Density' = round(rho,4),
'avg path lenght' = round(avg_path_lenght,2),
'log(n)/log(2m/n)' = round(log(n)/log(2*m/n),2) ) )
global_trans <- transitivity(graph = G, type = "global")
local_trans <- transitivity(graph = G, type = "local")
rho = m/(n*(n-1)/2)
#distribution_geodetics <- distance_table(G)$res #2 minutes
distribution_geodetics <- distribution_geodetics/sum(distribution_geodetics)
#avg_path_lenght<- mean_distance(G, directed = FALSE)
avg_path_lenght <- sum(
distribution_geodetics*
1:length(distribution_geodetics))
ggplot(data =
data.frame(y = distribution_geodetics,       x=1:length(distribution_geodetics)),
aes(y)
) +
geom_col()
global_trans <- transitivity(graph = G, type = "global")
local_trans <- transitivity(graph = G, type = "local")
rho = m/(n*(n-1)/2)
#distribution_geodetics <- distance_table(G)$res #2 minutes
distribution_geodetics <- distribution_geodetics/sum(distribution_geodetics)
#avg_path_lenght<- mean_distance(G, directed = FALSE)
avg_path_lenght <- sum(
distribution_geodetics*
1:length(distribution_geodetics))
ggplot(data =
data.frame(y = distribution_geodetics,       x=1:length(distribution_geodetics)),
aes(x=x, y=y)
) +
geom_col()
#log(n)/log(2*m/n)
kable(data.frame('Global CC' = round(global_trans,4), 'Density' = round(rho,4),
'avg path lenght' = round(avg_path_lenght,2),
'log(n)/log(2m/n)' = round(log(n)/log(2*m/n),2) ) )
ggplot(data =
data.frame(y = distribution_geodetics,       x=1:length(distribution_geodetics)),
aes(x=x, y=y)
) +
geom_col( color = 'blue')
ggplot(data =
data.frame(y = distribution_geodetics,       x=1:length(distribution_geodetics)),
aes(x=x, y=y)
) +
geom_col( color = 'blue', fill='azure')
ggplot(data =
data.frame(y = distribution_geodetics,       x=1:length(distribution_geodetics)),
aes(x=x, y=y)
) +
geom_col( color = 'blue', fill='azure')+
geom_vline(aes(xintercept = avg_path_lenght))
ggplot(data =
data.frame(y = distribution_geodetics,       x=1:length(distribution_geodetics)),
aes(x=x, y=y)
) +
geom_col( color = 'blue', fill='azure')+
geom_segment(aes(x =  avg_path_lenght))
ggplot(data =
data.frame(y = distribution_geodetics,       x=1:length(distribution_geodetics)),
aes(x=x, y=y)
) +
geom_col( color = 'blue', fill='azure')+
geom_segment(aes(xend =  avg_path_lenght, yend=1))
ggplot(data =
data.frame(y = distribution_geodetics,       x=1:length(distribution_geodetics)),
aes(x=x, y=y)
) +
geom_col( color = 'blue', fill='azure')+
geom_vline(aes(xintercept =  avg_path_lenght))
ggplot(data =
data.frame(y = distribution_geodetics,       x=1:length(distribution_geodetics)),
aes(x=x, y=y)
) +
geom_col( color = 'blue', fill='azure')+
geom_vline(aes(xintercept =  avg_path_lenght), color = 'red')
ggplot(data =
data.frame(y = distribution_geodetics,       x=1:length(distribution_geodetics)),
aes(x=x, y=y)
) +
geom_col( color = 'blue', fill='azure')+
geom_vline(aes(xintercept =  avg_path_lenght), color = 'red')+
theme_minimal()
ggplot(data =
data.frame(y = distribution_geodetics,       x=1:length(distribution_geodetics)),
aes(x=x, y=y)
) +
geom_col( color = 'blue', fill='azure')+
geom_vline(aes(xintercept =  avg_path_lenght), color = 'red')+
theme_minimal()+
labs(title ='Shortest Paths Distribution', x = 'Path Length', y='fraction')
ggplot(data =
data.frame(y = distribution_geodetics,       x=1:length(distribution_geodetics)),
aes(x=x, y=y)
) +
geom_col( color = 'blue', fill='azure')+
geom_vline(aes(xintercept =  avg_path_lenght), color = 'red')+
theme_minimal()+
labs(title ='Shortest Paths Distribution', x = 'Path Length', y='fraction')+
guides()
ggplot(data =
data.frame(y = distribution_geodetics,       x=1:length(distribution_geodetics)),
aes(x=x, y=y)
) +
geom_col( color = 'blue', fill='azure')+
geom_vline(aes(xintercept =  avg_path_lenght), color = 'red')+
theme_minimal()+
labs(title ='Shortest Paths Distribution', x = 'Path Length', y='fraction')+
guides("legend")
ggplot(data =
data.frame(y = distribution_geodetics,       x=1:length(distribution_geodetics)),
aes(x=x, y=y)
) +
geom_col( color = 'blue', fill='azure')+
geom_vline(aes(xintercept =  avg_path_lenght), color = 'red')+
theme_minimal()+
labs(title ='Shortest Paths Distribution', x = 'Path Length', y='fraction')+
guide_legend()
ggplot(data =
data.frame(y = distribution_geodetics,       x=1:length(distribution_geodetics)),
aes(x=x, y=y)
) +
geom_col( color = 'blue', fill='azure')+
geom_vline(aes(xintercept =  avg_path_lenght), color = 'red')+
theme_minimal(legend.position = "bottom")+
labs(title ='Shortest Paths Distribution', x = 'Path Length', y='fraction')
ggplot(data =
data.frame(y = distribution_geodetics,       x=1:length(distribution_geodetics)),
aes(x=x, y=y)
) +
geom_col( color = 'blue', fill='azure')+
geom_vline(aes(xintercept =  avg_path_lenght), color = 'red')+
theme(legend.position = "bottom")+
labs(title ='Shortest Paths Distribution', x = 'Path Length', y='fraction')
ggplot(data =
data.frame(y = distribution_geodetics,       x=1:length(distribution_geodetics)),
aes(x=x, y=y)
) +
geom_col( color = 'blue', fill='azure')+
geom_vline(aes(xintercept =  avg_path_lenght, colour = 'red'))+
theme(legend.position = "bottom")+
labs(title ='Shortest Paths Distribution', x = 'Path Length', y='fraction')
ggplot(data =
data.frame(y = distribution_geodetics,       x=1:length(distribution_geodetics)),
aes(x=x, y=y)
) +
geom_col( color = 'blue', fill='azure')+
geom_vline(aes(xintercept =  avg_path_lenght, colour = 'red'))+
theme_minimal()+
labs(title ='Shortest Paths Distribution', x = 'Path Length', y='fraction')+
guide_legend(title.position = "left")
ggplot(data =
data.frame(y = distribution_geodetics,       x=1:length(distribution_geodetics)),
aes(x=x, y=y)
) +
geom_col( color = 'blue', fill='azure')+
geom_vline(aes(xintercept =  avg_path_lenght, colour = 'red'))+
theme_minimal()+
labs(title ='Shortest Paths Distribution', x = 'Path Length', y='fraction')+
guide(guide_legend(title.position = "left"))
ggplot(data =
data.frame(y = distribution_geodetics,       x=1:length(distribution_geodetics)),
aes(x=x, y=y)
) +
geom_col( color = 'blue', fill='azure')+
geom_vline(aes(xintercept =  avg_path_lenght, colour = 'red'))+
theme_minimal()+
labs(title ='Shortest Paths Distribution', x = 'Path Length', y='fraction')
ggplot(data =
data.frame(y = distribution_geodetics,       x=1:length(distribution_geodetics)),
aes(x=x, y=y)
) +
geom_col( color = 'blue', fill='azure')+
geom_vline(aes(xintercept =  avg_path_lenght, colour = 'red'))+
theme_minimal()+
labs(title ='Shortest Paths Distribution', x = 'Path Length', y='fraction')+
guides(fill = guide_legend(title = NULL))
degr_distr <- degree_distribution(graph = G)
lin_reg <- lm(log(degr_distr)~log(1:length(degr_distr)), subset = degr_distr>0)
summary(lin_reg)
plot(degr_distr, log = "xy")
abline(a = lin_reg$coefficients[1], b=lin_reg$coefficients[2], col = 'red')
C = exp(lin_reg$coefficients[1])
b = lin_reg$coefficients[2]
plot(degr_distr)
axe = 1:length(degr_distr)
lines(axe, C*(axe)^b, col='red')
degr_distr <- degree_distribution(graph = G)
lin_reg <- lm(log(degr_distr)~log(1:length(degr_distr)), subset = degr_distr>0)
summary(lin_reg)
ggplot2(data.frame(
"degree distribution" = degr_distr,
"fitted line" = lin_reg$fitted.values
))+geom_point(mapping(aes(y = `degree distribution`)))
ggplot2(data.frame(
"degree distribution" = degr_distr,
"fitted line" = lin_reg$fitted.values
))+geom_point(mapping(aes(y = `degree distribution`)))
ggplot(data.frame(
"degree distribution" = degr_distr,
"fitted line" = lin_reg$fitted.values
))+geom_point(mapping(aes(y = `degree distribution`)))
lin_reg$fitted.values
length(lin_reg$fitted.values)
length(degr_distr)
subset(degr_distr, subset = degr_distr>0)
ggplot(data.frame(
"degree distribution" = subset(degr_distr, subset = degr_distr > 0),
"fitted line" = lin_reg$fitted.values,
"x" = subset(1:length(degr_distr), subset = degr_distr > 0)
))+geom_point(mapping(aes(y = `degree distribution`)))
ggplot(data.frame(
"degree distribution" = subset(degr_distr, subset = degr_distr > 0),
"fitted line" = lin_reg$fitted.values,
"x" = subset(1:length(degr_distr), subset = degr_distr > 0)
))+geom_point(mapping = aes(y = `degree distribution`) )
ggplot(data.frame(
"degree distribution" = subset(degr_distr, subset = degr_distr > 0),
"fitted line" = lin_reg$fitted.values,
"x" = subset(1:length(degr_distr), subset = degr_distr > 0)
))+geom_point(mapping = aes(y = 'degree distribution') )
ggplot(data.frame(
"degree distribution" = subset(degr_distr, subset = degr_distr > 0),
"fitted line" = lin_reg$fitted.values,
"x" = subset(1:length(degr_distr), subset = degr_distr > 0)
))+geom_point(mapping = aes(x = 'x', y = 'degree distribution') )
ggplot(data.frame(
"degree distribution" = subset(degr_distr, subset = degr_distr > 0),
"fitted line" = lin_reg$fitted.values,
"x" = subset(1:length(degr_distr), subset = degr_distr > 0)
))+geom_point(mapping = aes(x = `X`, y = `degree distribution`) )
ggplot(data.frame(
`degree distribution` = subset(degr_distr, subset = degr_distr > 0),
`fitted line` = lin_reg$fitted.values,
x = subset(1:length(degr_distr), subset = degr_distr > 0)
))+geom_point(mapping = aes(x = x, y = `degree distribution`) )
ggplot(data.frame(
y1 = subset(degr_distr, subset = degr_distr > 0),
y2 = lin_reg$fitted.values,
x = subset(1:length(degr_distr), subset = degr_distr > 0)
))+geom_point(mapping = aes(x = x, y = `degree distribution`) )
ggplot(data.frame(
y1 = subset(degr_distr, subset = degr_distr > 0),
y2 = lin_reg$fitted.values,
x = subset(1:length(degr_distr), subset = degr_distr > 0)
))+geom_point(mapping = aes(x = x, y = y1) )
?data.frame
ggplot(data.frame(
y1 = subset(degr_distr, subset = degr_distr > 0),
y2 = lin_reg$fitted.values,
x = subset(1:length(degr_distr), subset = degr_distr > 0, row.names(c("degree distribution","fitted values", "x")))
))+geom_point(mapping = aes(x = x, y = y1) )
data.frame(
y1 = subset(degr_distr, subset = degr_distr > 0),
y2 = lin_reg$fitted.values,
x = subset(1:length(degr_distr), subset = degr_distr > 0, row.names(c("degree distribution","fitted values", "x"))
data.frame(
y1 = subset(degr_distr, subset = degr_distr > 0),
y2 = lin_reg$fitted.values,
x = subset(1:length(degr_distr), subset = degr_distr > 0, row.names(c("degree distribution","fitted values", "x"))))
ggplot(data.frame(
y1 = subset(degr_distr, subset = degr_distr > 0),
y2 = lin_reg$fitted.values,
x = subset(1:length(degr_distr), subset = degr_distr > 0, col.names(c("degree distribution","fitted values", "x")))
))+geom_point(mapping = aes(x = x, y = y1) )
data.frame(
y1 = subset(degr_distr, subset = degr_distr > 0),
y2 = lin_reg$fitted.values,
x = subset(1:length(degr_distr), subset = degr_distr > 0, col.names(c("degree distribution","fitted values", "x")))
)
ggplot(data.frame(
"degree distribution" = subset(degr_distr, subset = degr_distr > 0),
"fitted values" = lin_reg$fitted.values,
x = subset(1:length(degr_distr), subset = degr_distr > 0))
)
ggplot(data.frame(
"degree distribution" = subset(degr_distr, subset = degr_distr > 0),
"fitted values" = lin_reg$fitted.values,
x = subset(1:length(degr_distr), subset = degr_distr > 0))
)
ggplot(data.frame(
y1 = subset(degr_distr, subset = degr_distr > 0),
y2 = lin_reg$fitted.values,
x = subset(1:length(degr_distr), subset = degr_distr > 0))
)
data.frame(
"degree distribution" = subset(degr_distr, subset = degr_distr > 0),
"fitted values" = lin_reg$fitted.values,
x = subset(1:length(degr_distr), subset = degr_distr > 0))
ggplot(data.frame(
"degree distribution" = subset(degr_distr, subset = degr_distr > 0),
"fitted values" = lin_reg$fitted.values,
x = subset(1:length(degr_distr), subset = degr_distr > 0))
)
ggplot(data.frame(
"degree distribution" = subset(degr_distr, subset = degr_distr > 0),
"fitted values" = lin_reg$fitted.values,
x = subset(1:length(degr_distr), subset = degr_distr > 0))
)
ggplot(data.frame(
y1 = subset(degr_distr, subset = degr_distr > 0),
y2 = lin_reg$fitted.values,
x = subset(1:length(degr_distr), subset = degr_distr > 0))
)
degr_distr <- degree_distribution(graph = G)
lin_reg <- lm(log(degr_distr)~log(1:length(degr_distr)), subset = degr_distr>0)
summary(lin_reg)
ggplot(data.frame(
y1 = subset(degr_distr, subset = degr_distr > 0),
y2 = lin_reg$fitted.values,
x = subset(1:length(degr_distr), subset = degr_distr > 0))
)
+geom_point(mapping = aes(x = x, y = y1) )
degr_distr <- degree_distribution(graph = G)
lin_reg <- lm(log(degr_distr)~log(1:length(degr_distr)), subset = degr_distr>0)
summary(lin_reg)
ggplot(data = data.frame(
y1 = subset(degr_distr, subset = degr_distr > 0),
y2 = lin_reg$fitted.values,
x = subset(1:length(degr_distr), subset = degr_distr > 0)))+
geom_point(mapping = aes(x = x, y = y1) )
plot(degr_distr, log = "xy")
abline(a = lin_reg$coefficients[1], b=lin_reg$coefficients[2], col = 'red')
degr_distr <- degree_distribution(graph = G)
lin_reg <- lm(log(degr_distr)~log(1:length(degr_distr)), subset = degr_distr>0)
summary(lin_reg)
ggplot(data = data.frame(
"degree distribution" = subset(degr_distr, subset = degr_distr > 0),
y2 = lin_reg$fitted.values,
x = subset(1:length(degr_distr), subset = degr_distr > 0)))+
geom_point(mapping = aes(x = x, y = `degree distribution`) )
degr_distr <- degree_distribution(graph = G)
lin_reg <- lm(log(degr_distr)~log(1:length(degr_distr)), subset = degr_distr>0)
summary(lin_reg)
ggplot(data = data.frame(
"degree distribution" = subset(degr_distr, subset = degr_distr > 0),
y2 = lin_reg$fitted.values,
x = subset(1:length(degr_distr), subset = degr_distr > 0)))+
geom_point(mapping = aes(x = x, y = `degree distribution`) )
degr_distr <- degree_distribution(graph = G)
lin_reg <- lm(log(degr_distr)~log(1:length(degr_distr)), subset = degr_distr>0)
summary(lin_reg)
ggplot(data = data.frame(
y1 = subset(degr_distr, subset = degr_distr > 0),
y2 = lin_reg$fitted.values,
x = subset(1:length(degr_distr), subset = degr_distr > 0)))+
geom_point(mapping = aes(x = x, y = y1) )
plot(degr_distr, log = "xy")
abline(a = lin_reg$coefficients[1], b=lin_reg$coefficients[2], col = 'red')
degr_distr <- degree_distribution(graph = G)
lin_reg <- lm(log(degr_distr)~log(1:length(degr_distr)), subset = degr_distr>0)
summary(lin_reg)
ggplot(data = data.frame(
y1 = subset(degr_distr, subset = degr_distr > 0),
y2 = lin_reg$fitted.values,
x = subset(1:length(degr_distr), subset = degr_distr > 0)))+
geom_point(mapping = aes(x = x, y = y1, color = "blue") )+
geom_line(mapping = aes(x = x, y = y2, color = "red"))+
scale_x_log10()+scale_y_log10()
plot(degr_distr, log = "xy")
abline(a = lin_reg$coefficients[1], b=lin_reg$coefficients[2], col = 'red')
degr_distr <- degree_distribution(graph = G)
lin_reg <- lm(log(degr_distr)~log(1:length(degr_distr)), subset = degr_distr>0)
summary(lin_reg)
ggplot(data = data.frame(
y1 = subset(degr_distr, subset = degr_distr > 0),
y2 = lin_reg$fitted.values,
x = subset(1:length(degr_distr), subset = degr_distr > 0)))+
geom_point(mapping = aes(x = x, y = y1, color = "blue") )+
scale_x_log10()+scale_y_log10()+
geom_line(mapping = aes(x = x, y = y2, color = "red"))
plot(degr_distr, log = "xy")
abline(a = lin_reg$coefficients[1], b=lin_reg$coefficients[2], col = 'red')
degr_distr <- degree_distribution(graph = G)
lin_reg <- lm(log(degr_distr)~log(1:length(degr_distr)), subset = degr_distr>0)
summary(lin_reg)
ggplot(data = data.frame(
y1 = subset(degr_distr, subset = degr_distr > 0),
y2 = lin_reg$fitted.values,
x = subset(1:length(degr_distr), subset = degr_distr > 0)))+
geom_point(mapping = aes(x = x, y = y1, color = "blue") )+
scale_x_log10()+scale_y_log10()+
geom_abline(aes(intercept = lin_reg$coefficients[1], slope = lin_reg$coefficients[2], color = "red"))
plot(degr_distr, log = "xy")
abline(a = lin_reg$coefficients[1], b=lin_reg$coefficients[2], col = 'red')
degr_distr <- degree_distribution(graph = G)
lin_reg <- lm(log(degr_distr)~log(1:length(degr_distr)), subset = degr_distr>0)
summary(lin_reg)
ggplot(data = data.frame(
y1 = subset(degr_distr, subset = degr_distr > 0),
y2 = lin_reg$fitted.values,
x = subset(1:length(degr_distr), subset = degr_distr > 0)))+
geom_point(mapping = aes(x = x, y = y1, color = "red") )+
scale_x_log10()+scale_y_log10()+
geom_abline(aes(intercept = lin_reg$coefficients[1], slope = lin_reg$coefficients[2], color = "blue"))
plot(degr_distr, log = "xy")
abline(a = lin_reg$coefficients[1], b=lin_reg$coefficients[2], col = 'red')
ggplot(data = data.frame(
y1 = degr_distr,
y2 = C*(axe)^b,
x = axe ))+
geom_point(mapping = aes(x = x, y = y1, color = "blue") )+
geom_line(mapping = aes(x = x, y = y2, color="red"))
degr_distr <- degree_distribution(graph = G)
lin_reg <- lm(log(degr_distr)~log(1:length(degr_distr)), subset = degr_distr>0)
summary(lin_reg)
plot(degr_distr, log = "xy")
abline(a = lin_reg$coefficients[1], b=lin_reg$coefficients[2], col = 'red')
degr_distr <- degree_distribution(graph = G)
lin_reg <- lm(log(degr_distr)~log(1:length(degr_distr)), subset = degr_distr>0)
summary(lin_reg)
plot(degr_distr, log = "xy")
lines(lin_reg$fitted.values, col='red')
#abline(a = lin_reg$coefficients[1], b=lin_reg$coefficients[2], col = 'red')
lin_reg$fitted.values
plot(lin_reg$fitted.values, log = "xy")
plot(lin_reg$fitted.values)
plot(degr_distr, log = "xy")
abline(a = lin_reg$coefficients[1], b=lin_reg$coefficients[2], col = 'red')
degr_distr <- degree_distribution(graph = G)
lin_reg <- lm(log(degr_distr)~log(1:length(degr_distr)), subset = degr_distr>0)
summary(lin_reg)
plot(degr_distr, log = "xy")
abline(a = lin_reg$coefficients[1], b=lin_reg$coefficients[2], col = 'red')
lin_reg$coefficients[1]
plot(degr_distr, log = "xy")
log(lin_reg$coefficients[1])
plot(degr_distr, log = "xy")
degr_distr <- degree_distribution(graph = G)
lin_reg <- lm(log(degr_distr)~log(1:length(degr_distr)), subset = degr_distr>0)
plot(degr_distr, log = "xy")
abline(a = lin_reg$coefficients[1], b=lin_reg$coefficients[2], col = 'red')
####### caricare dataset
data <- read.csv("facebook_combined.txt", sep = ' ', header = TRUE)
data <- as.matrix(data)+1
####### caricare dataset
data <- read.csv("/FB/facebook_combined.txt", sep = ' ', header = TRUE)
####### caricare dataset
data <- read.csv("FB/facebook_combined.txt", sep = ' ', header = TRUE)
data <- as.matrix(data)+1
G = graph_from_edgelist(data, directed = FALSE)
degr_distr <- degree_distribution(graph = G)
lin_reg <- lm(log(degr_distr)~log(1:length(degr_distr)), subset = degr_distr>0)
plot(degr_distr, log = "xy")
abline(a = lin_reg$coefficients[1], b=lin_reg$coefficients[2], col = 'red')
####### caricare dataset
data <- read.csv("deezer_europe/deezer_europe_edges.csv", sep = ',', header = TRUE)
data <- as.matrix(data)+1
G = graph_from_edgelist(data, directed = FALSE)
degr_distr <- degree_distribution(graph = G)
lin_reg <- lm(log(degr_distr)~log(1:length(degr_distr)), subset = degr_distr>0)
plot(degr_distr, log = "xy")
abline(a = lin_reg$coefficients[1], b=lin_reg$coefficients[2], col = 'red')
C
b
sum(C*axe^b)
sum(degr_distr)
length(degr_distr)
axe
C = exp(lin_reg$coefficients[1])
b = lin_reg$coefficients[2]
C
C = exp(lin_reg$coefficients[1])
b = lin_reg$coefficients[2]
plot(degr_distr)
axe = 1:length(degr_distr)
lines(axe, C*(axe)^b, col='red')
degree_correlation_func <- knn(G)$knnk
maxdegree <- length(degr_distr)
k_square <- sum(degr_distr * (1:maxdegree)^2)
k_mean <- sum(degr_distr * 1:maxdegree)
k_neutral <- k_square/k_mean
v <- 1:length(degree_correlation_func)
degr_cor_fit <- lm(degree_correlation_func ~ v,
subset = is.nan(degree_correlation_func) == FALSE)
summary(degr_cor_fit)
plot(degree_correlation_func)
abline(h = k_neutral, col = "red")
abline(a = degr_cor_fit$coefficients[1], b=degr_cor_fit$coefficients[2],
col ="green")
assortativity_degree(G)
degrees <- Matrix::colSums(A)
#this vector contains the id nodes in decreasing order w.r.t. degree
decreas_nodes_degree<-order(degrees, decreasing = TRUE)
density_induced<- function(nodes_id){
#computes the density of the subgraph induced by nodes_id
n_d <- length(nodes_id)
return(sum(A[nodes_id,nodes_id])/(n_d*(n_d-1)))
}
r <- seq(from=0, to=1, by=0.001)
phi <- sapply(r,function(x){
nodes_id <- decreas_nodes_degree[1:round(n*x,0)]
return(density_induced(nodes_id))
})
plot(phi, log="x")
1+1
